base:
  config:
    tidb:
      hostname: tidb.songmz.com
      port: 4000
    nacos:
      hostname: nacos.songmz.com
      port: 80
    sentile:
      hostname: localhost
      port: 8080
    redis:
      hostname: redis.songmz.com
      port: 6379

spring:
  application:
    name: business-oauth2
  main:
    allow-bean-definition-overriding: true
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  cloud:
    nacos:
      discovery:
        server-addr: ${base.config.nacos.hostname}:${base.config.nacos.port}
    sentinel:
      transport:
        dashboard: ${base.config.sentile.hostname}:${base.config.sentile.port}
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbc-url: jdbc:mysql://${base.config.tidb.hostname}:${base.config.tidb.port}/mplus_ums_oauth2?useUnicode=true&characterEncoding=utf-8&serverTimezone=Hongkong&useSSL=false
    username: root
    password:
    hikari:
      minimum-idle: 5
      idle-timeout: 600000
      maximum-pool-size: 10
      auto-commit: true
      pool-name: MyHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  redis:
    host: ${base.config.redis.hostname}
    port: ${base.config.redis.port}
    # 集群配置，上生产后使用
    #    cluster:
    #      nodes: ${base.config.redis.hostname}:${base.config.redis.port}
    lettuce:
      pool:
        min-idle: 0
        max-idle: 8
        max-wait: -1ms
        max-active: 8
    # Redis高可用集群，k8s已经实现了，所以就可以忽略了，如果是在docker中部署redis，还是要用sentinel的
#    sentinel:
#      master: mymaster
#      nodes: ${base.config.redis.hostname}:26379

dubbo:
  scan:
    base-packages: com.songmz.myshop.plus.business.controller, com.songmz.myshop.plus.business.service
  protocol:
    name: dubbo
    port: -1
    serialization: kryo
  registry:
    address: nacos://${base.config.nacos.hostname}
    port: ${base.config.nacos.port}

feign:
  okhttp:
    enabled: true
  httpclient:
    enabled: false
  sentinel:
    enabled: true

server:
  port: 9001

management:
  endpoints:
    web:
      exposure:
        include: "*"

business:
  oauth2:
    grant_type: password
    client_id: client
    client_secret: secret